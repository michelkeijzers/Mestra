TODO
====


DEBT
====



Memory consumption:
- Change step time (for delay times) to 1 byte instead of 2 using a table (exponentionally)
- Check why command and packedcommand use more memory than before
- Put fixture 4 booleans together: initialize, forceupdate, hold, once


Commands
========

<ParGroup> <Item>*

<ParGroup>:           2 characters

<<Item>:             (<Command>          |
                      <DelayTime>        |
                      <PresetNumber>     |
                      <StrobeTime>       |
                      <StepNumber>       |
                      <Hold>             |
					  <Once>             |
                      <AlternativeColor> |
                      <DefaultColor>)*

<Command>:           'c' <TriggerMode> | <Loop> | <Once> | <Restart>) 
<DelayTime>:         't' <uint16>
<StrobeSpeed>:       'b' <uint16> (overrides white)
<PresetNumber>:      'p' <uint8>
<StepNumber>:        's' <uint16> | 'l' //  L means last step number
<Hold>:              'h' <bool>
<Once>:              'o' <bool>
<DefaultColor>:      'd' <Color>
<AlternativeColor>:  'a' <Color>


<TriggerMode>:       'g'    CurrentStep = Last (by StepNumber), Hold = True , Once = True
<Loop>:              'l'    CurrentStep = 0                   , Hold = False, Once = False
<Once>:              'o'    CurrentStep = 0                   , Hold = False, Once = True
<Restart>:           'r'    CurrentStep = 0                   , Hold = False, Once unchanged

<Color>:             ( (('i')('r')('g')('b')('w'))*) | (<I>,<R>,<G>,<B>(,<W>)))
<R>:                 <uint8>
<G>:                 <uint8>
<B>:                 <uint8>
<I>:                 <uint8>
<W>:                 <uint8>, switches off strobo
<ws>:                white space

<uint16>:            '0'..'65535'
<uint8>:             '0'..'255'
<bool':              '0' | '1'

e.g.

la l a:irgb d ir p 20 t 1000
la 


Packed Command bytes
====================

Label                    Byte(s)  Bit(s) Parameter                Value Meaning of Value    Continuation				Comment              
------------------------ -------- ------ ------------------------ ----- ------------------- ---------------------------	---------------------------------------------	
Commands                   0       7~5   Length                    0-7													Length of bytes following byte 0
                           0       4     Category                  0    Trigger             Category Triggers
                                                                   1    Instruction         Category Instructions
Category Triggers          0       3     Type                      0    DMX                 DMX Triggers
                                                                   1    MIDI                MIDI Triggers
        
DMX Triggers                                                                                                            There is no DMX Input (thus no DMX triggers)
MIDI Triggers              0       2~0   Main Type                 0    Time                ->Time Trigger
                                                                   1    Note                ->MIDI Value Trigger        Value is note
																   2    CC                  ->MIDI CC Trigger
																   3    Aftertouch          ->MIDI Value Trigger        Value is aftertouch
																   4    Program Change      ->MIDI Value Trigger        Value is CC for Program Change
																   5-7  (reserved)
Time Trigger               1             Time
MIDI Value Trigger         1       7     Omni MIDI Channel              Off/On
                                   6~3   MIDI Channel              0-15 MIDI Channel
								   2     Range                     0    Single MIDI Value   ->Single MIDI value
								                                   1    Range               ->Range MIDI values
								   1     Note On/Off                    Note Off/Note On                                Only for Note MIDI Trigger
                                   0     (Release) Velocity             No/Velocity Range   if 1: ->Range MIDI values	Only for Note MIDI Trigger															    
MIDI CC Trigger            1       7     Omni MIDI Channel              Off/On
                                   6~3   MIDI Channel              0-15 MIDI Channel
								   2     Range                     0    Single MIDI Value   ->Single MIDI value         Store after CC Number (byte 2)
								                                   1    Range               ->Range MIDI values         Store after CC Number (byte 2)
								   1~0   (unused)
						   2       7     (unused)
						   2       6~0   CC Number 


Single Note	               var     7    (unused)                 
                                   6~0  MIDI Note
Note Range                 var     7    (unused)                 
                                   6~0  Start MIDI Note
						   var+1   7    (unused)                 
                                   6~0  End MIDI Note



Category Instructions      0       3     Type                      0    DMX                 DMX Instructions
                                                                   1    MIDI                MIDI Instructions
DMX Instructions           0       2~0   (unused)
                           1       7~5   (unused)
						   1       4~0   Par Group
(Flags1)                   2       7     Preset Number Set              Not set/Set                                     if Set: ->Preset Number is present
						   2       6     Delay Time Set                 Not set/Set                                     if Set: ->Delay Time is present
						   2       5     Strobe Time Set                Not set/Set                                     if Set: ->Strobe Time is present
						   2       4~3   Step Number               00   Not set/Set/0/Last                              if Set: ->Step Number is present
						                                           10   0											    Step Number 0 is selected                
																   11   Last                                            Last Step Number is selected                             
                           2       2~0   (unused)
(Flags2)				   3       7     Hold Set                       Not set/Set                                     if Set: Next bit is used
						   3       6     Hold                           Disabled/Enabled
						   3       5     Once Set                       Not set/Set                                     if Set: Next bit is used
						   3       4     Once                           Disabled/Enabled 
						   3       3     Default Color Set              Not set/Set                                     if Set: Default ->Color is present
						   3       2     Alternate Color Set            Not set/Set                                     if Set: Alternate ->Color is present
						   3       1~0   (unused)
Preset Number            x+1             Preset Number
Delay Time               x+2             Delay Time                     Time Table
Strobe Time              x+3             Strobe Time                    Time Table
Step Number              x+4,x+5         Step Number                    Step Number
Color                    x+6       7~6   Color Form                00   Short Color Form    ->Short Color Form
                                                                   01   Medium Color Form   ->Medium Color Form
																   10   Single Color Form   ->Single Color Form
																   11   Long Color Form     ->Long Color Form
Short Form Color         x+6       5     Intensity                      0/255
                         x+6       4     Red                            0/255
                         x+6       3     Green                          0/255
                         x+6       2     Blue                           0/255
                         x+6       1     White Used                     No/Yes
                         x+6       0     White                          0/255
Medium Form Color        x+6       5~4   Intensity	                    0/   64/   128/        255
                         x+6       3~1   Red     	                    0/32/64/96/128/160/196/255
                         x+6       0     Green                          0/32/64/96/128/160/196/255
						 x+7       7~6   (Green continued)
                         x+6       5~3   Blue                           0/32/64/96/128/160/196/255
                         x+6       2~0   White                          Not set/0/32/64/96/128/160/    255
Single Form Color        x+6       5~4   Color                          Red/Green/Blue/White						Intensity assumed 255, all other colors assumed 0
                                   3~0   Color Value                    value * 32, if 224->255 (max)
Long Form Color          x+6       5     Default Color                  0/255								    	Intensity assumed 255
                         x+6       4     Red Set                        Default, else:      -> Color Value	    	Color value in additional byte
                         x+6       3     Green Set                      Default, else:      -> Color Value	    	Color value in additional byte
                         x+6       2     Blue Set                       Default, else:      -> Color Value	    	Color value in additional byte
                         x+6       1     White Used                     Off/On                                      if On: Set white color
                         x+6       0     White Set                      Default, else:      -> Color Value		    Color value in additional byte
Color Value				 x+7...          Value                          0-255


MIDI Instructions          0       2~0   (unused)
										   										   										   										   

Time                       var     7~3   Time                     0-31  [0.0..1.0) divided over 32 steps   Example 12,345 ms ->
                           var     2~0   Exponent                 0     *1e-2 (  0.01)                             65,535 * 10,000 = 655,350,000
						                                          1     *1e-1 (  0.1)                              655,350,000 / 32 = 
																  2     *1e 0 (  1)
																  3     *1e 1 ( 10)
																  4     *1e 2 (100)
																  5-7   (unused)






Fixture/Par data
================

Bytes/bits     Item                    Type                       Class          Remarks/Improvements
-------------- ----------------------- -------------------------- -------------- --------------------------
   0     7~4   (unused)                                                           Unused bits
         3~0   fixtureNumber           fixture_number_t           Fixture
   1     7     initialize              bool                       Fixture
         6     stepping                bool                       Fixture
         5     once                    bool                       Fixture
         4~3   (unused)                                                          Unused bits, but reserve for programs
         2~0   program                 program_t                  Fixture                    
   1     0     dmxOffsetChannel        dmx_channel_t, MS bit      Fixture  
   2     7~0   dmxOffsetChannel        dmx_channel_t, LSB         Fixture        Assume DMX offset channels of 8
   3- 4  full  currentStep             step_t                     Fixture 
   5- 6  full  nrOfSteps               step_t                     Fixture
   7-10  full  stepTime                step_time_t                Fixture        Use smarter duration (exponential predefined table)
  11-14  full  stepDuration            step_duration_t            Fixture        Use smarter duration (exponential predefined table)
  15-16  full  parameter1              parameter_t                Fixture 
  17-18  full  parameter2              parameter_t                Fixture 
  19-20  full  parameter3              parameter_t                Fixture      
  21-25  full  defaultColor            Irgbw                      Par            Color can fit in 5 * 0..48 (max 64), thus 30 bits
  26-30  full  alternateColor          Irgbw                      Par            Color can fit in 5 * 0..48 (max 64), thus 30 bits
  31     7~2                                                                     Unused bits
  31     1~0   segmentNumber           led_bar_segment_number_t   LedBarSegment  Segment number (0-2)
  32-35        (Vtable/PlatformFixture*)                          
    
Total                                                36
Nr of Fixtures                                       17 *  (14 pars + 3 led bar segments) 
                                                    ---
Total                                               612


List of presets
===============

Preset              ID  Preset Program Description
Group                   number
------------------- --- ------ ------- ------------------------------------------
Switch colors        0     10    n.a. Default color    -> Alternate color
                     1     11    n.a. Alternate color  -> Default color
                     2     12    n.a. Default color   <-> Alternate color
                     3     13    n.a. Default color    -> Actual color
                     4     14    n.a. Actual color     -> Default color
                     5     15    n.a. Default color   <-> Actual color
                     6     16    n.a. Alternate color  -> Actual color
                     7     17    n.a. Actual color     -> Alternate color
                     8     18    n.a. Alternate color <-> Actual color
Solid color          9     20      0  Solod (Default) color
Dual colors         10     30     10  Switch between default and alternate color
                    11     31     10  Switch between alternate and default color
Chase               12     40     10  Chase left -> right
                    13     41     10  Chase right -> left
                    14     42     10  Chase left -> right -> left
                    15     43     10  Chase right -> left -> right
Fade in/out         16     50     20  Fade default color->alternate color
                    17     51     21  Fade alternate color->default color
                    18     52     20  Fade def->alt->def
                    19     53     20  Fade alt->def->alt
Fade + Chase        20     60     30  Fade + Chase, left -> right
                    21     61     30  Fade + Chase, right -> left
                    22     62     30  Fade + Chase, left -> right -> left
                    23     63     30  Fade + Chase, right -> left -> right
Rainbow colors      24     70     40  No fade, left -> right, 
                    25     71     40  No fade, right -> left
                    26     72     40  Fade, left -> right
                    27     73     40  Fade, right -> left

Program List
============

Prg Name       Par1 Par2 Par3 Description
--- ---------- ---- ---- ---- ------------------------------------------------------------------------
  0 NoProgram   -    -    -   No program
  5 FixedColor	-    -    -   Single/Fixed color
 10 DualColor  Yes  Yes   -   Use default color if step = par1 or par2, else alternate color
 20 FadeInOut   -    -    -   Fade in using default color for fade in, alt color for fade out
 21 FadeOut     -    -    -   Like FadeInOut, but only FadeOut
 30 FaceChase  Yes  Yes  Yes  Fade + chase combined (par1/2 = active steps, par 3 = Nr of pars in group)
 40 Rainbow    Yes   -    -   Par 1 = Step increase


 PAR Groups
 ==========

                                                     LED Bar   Ego  Banners      
                                                               Risers      Drums  Front Left  Front Right
                                                     BL  BC BR EL ER NL NR DL DR  FL FL FL FL FR FR FR FR
                                                                                  4  3  2  1  1  2  3  4
   Byte 3--------------------3  2--------------------2   1-------------- -----1   0--------------------0
   Bit  7  6  5  4  3  2  1  0  7  6  5  4  3  2  1  0   7  6  5  4  3  2  1  0   7  6  5  4  3  2  1  0
In Index   30 29 28 27 26 25 24 23 22 21 20 19 18 17 16  15 14 13 12 11 10 9  8   7  6  5  4  3  2  1  0
dx Fixture Group      Fixture Part                   Set
-- ------------------ ------------------------------ -------- ----- ----- -----  ----------- -----------
00 A All Groups       A All                          1   1  1  1  1  1  1  1  1   1  1  1  1  1  1  1  1
01                    C Center                       0   1  0  0  0  0  0  0  0   0  1  1  0  0  1  1  0  
02                    E All Except Ego Risers        1   1  1  0  0  1  1  1  1   1  1  1  1  1  1  1  1
03                    L Left                         1   0  0  0  0  1  0  1  0   1  1  1  1  0  0  0  0  
04                    R Right                        0   0  1  0  0  0  1  0  1   0  0  0  0  1  1  1  1  
10 B Led Bar          A All                          1   1  1  0  0  0  0  0  0   0  0  0  0  0  0  0  0  
11                    C Center                       0   1  0  0  0  0  0  0  0   0  0  0  0  0  0  0  0  
12                    L Left                         1   0  0  0  0  0  0  0  0   0  0  0  0  0  0  0  0  
13                    R Right                        0   0  1  0  0  0  0  0  0   0  0  0  0  0  0  0  0  
20 D Drums            A All                          0   0  0  1  1  0  0  0  0   0  0  0  0  0  0  0  0  
21                    L Left                         0   0  0  1  0  0  0  0  0   0  0  0  0  0  0  0  0  
22                    R Right                        0   0  0  0  1  0  0  0  0   0  0  0  0  0  0  0  0  
30 E Ego Risers       A All                          0   0  0  1  1  0  0  0  0   0  0  0  0  0  0  0  0  
31                    L Left                         0   0  0  1  0  0  0  0  0   0  0  0  0  0  0  0  0  
32                    R Right                        0   0  0  0  1  0  0  0  0   0  0  0  0  0  0  0  0  
40 F Front            A All                          0   0  0  0  0  0  0  0  0   1  1  1  1  1  1  1  1  
41                    C Corners                      0   0  0  0  0  0  0  0  0   1  0  0  1  1  0  0  1  
42                    M Middle                       0   0  0  0  0  0  0  0  0   0  1  1  0  0  1  1  0  
43                    I Inner                        0   0  0  0  0  0  0  0  0   0  1  1  1  1  1  1  0  
44                    O Outer                        0   0  0  0  0  0  0  0  0   1  0  0  0  0  0  0  1  
50 L (Front) Left     1 Inside                       0   0  0  0  0  0  0  0  0   0  0  0  1  0  0  0  1  
51                    2                              0   0  0  0  0  0  0  0  0   0  0  1  0  0  0  0  0  
52                    3                              0   0  0  0  0  0  0  0  0   0  1  0  0  0  0  0  0  
53                    4 Outside                      0   0  0  0  0  0  0  0  0   1  0  0  0  0  0  0  0  
54                    A All Left                     0   0  0  0  0  0  0  0  0   1  1  1  1  0  0  0  0  
55                    I Inner                        0   0  0  0  0  0  0  0  0   0  1  1  0  0  0  0  0  
56                    O Outer                        0   0  0  0  0  0  0  0  0   1  0  0  1  0  0  0  0  
60 N Banner           A All                          0   0  0  0  0  1  1  0  0   0  0  0  0  0  0  0  0  
61                    L Left                         0   0  0  0  0  1  0  0  0   0  0  0  0  0  0  0  0  
62                    R Right                        0   0  0  0  0  0  1  0  0   0  0  0  0  0  0  0  0  
70 R (Front) Right    1 Inside                       0   0  0  0  0  0  0  0  0   0  0  0  0  1  0  0  0  
71                    2                              0   0  0  0  0  0  0  0  0   0  0  0  0  0  1  0  0  
72                    3                              0   0  0  0  0  0  0  0  0   0  0  0  0  0  0  1  0  
73                    4 Outside                      0   0  0  0  0  0  0  0  0   0  0  0  0  0  0  0  1  
74                    A All                          0   0  0  0  0  0  0  0  0   0  0  0  0  1  1  1  1  
75                    I Inner                        0   0  0  0  0  0  0  0  0   0  0  0  0  0  1  1  0  
76                    O Outer                        0   0  0  0  0  0  0  0  0   0  0  0  0  1  0  0  1  





NOTES
=====

CommandParser::Parse()
  for fixture
    if par
	  CommandParser::SetPresetNumber(command, parNumber 0..32)
	    if preset set
		   PresetCommand::Run(fixture number, par bits, preset number)
		     for fixture 0..31
			   if fixture
			     SetFixture

	    


NARCOTIC EXAMPLE
================

Part 1: Song structure
----------------------
Narcotic can be split in the following parts:

- Intro
- Verse
- Chorus
- Verse
- Chorus
- Bridge
- Chorus
- Chorus

Part 2: Sub structure
---------------------
Some parts can be split further:

- Intro
  - Organ (2nd keyboard: right half notes, at end ribbon controller down)
  - Synth riff (1st keyboard: ribbon controller up, right half notes)
  - Low Synth (2nd keyboard: left half notes)
- Verse
  - No notes played
  - Pad (1st keyboard, octave 1-3)
  - Pad (1st keyboard, octave 3-4)
- Chorus ()
...

For the remainder we will only take the intro into account.

Part 3: Light Plan
------------------
Now the rough lighting will be added:

- Entire song: CC MC1 83 on puts strobo on front pars on, CC MC1 80 off cancels strobo
- Intro (CC MC1 84 on puts strobo on drum pars, CC MC1 84 off cancels strobo)
  - Organ: Blue light on front outer pars, green on LED bar, at end green led bar fades
  - Synth riff: For each note played, front outer pars go from purple to blue (rest stay blue)
  - Bass: For each note played, all front pars go from purple to blue (rest stay blue)
...

Part 4: Triggers
----------------
Add triggers:

- Song: All dark, triggers: CC MC1 83 on -> FA strobo on, CC MC1 83 off -> FA strobo off
- Intro (FO Blue half on, Sequence triggers: CC MC1 84 on -> DA strobo on, CC MC1 84 0 -> DA strobo off
  - Organ: (All pars dark), Note On MC2 C4-C8 -> FO trigger Purple->Blue, CC MC2 16 <64 -> LA Fade Blue 3000ms, Note On MC1 C4-C8 -> Goto next step
  - Synth riff: Note on MC2 -> FO trigger, Note on MC1 -> Goto next step
  - Bass: FA trigger Purple->Blue, MC1 note on -> FA trigger, MC1 no notes for 0.5 s -> goto next sequence

Part 5: Precise commands
------------------------
Fill in precise commands and triggers:

- Song: AA l I, triggers: CC MC1 83 127 -> FA s 1, CC MC1 83 0 -> FA s 0
- Intro (FO l -d 127 0 0 64, Sequence triggers: CC MC1 84 127 -> DA s 1, CC MC1 84 0 -> DA s 0
  - Organ: AA I 1, On MC2 C4-C8 -> F0 g d IRB a IB, CC MC2 16 0..63 -> LA o d irb a ib t 3000 p 42?, On MC1 C4-C8 -> nextstep
  - Synth riff: On MC2 -> FO o, On MC1 -> nextstep
  - Bass: FA g p 42? d irb a ib, On MC1 -> FA o, MC1 NoNotes? 2s -> nextseq

Part 6: Make lists
------------------

Put in lists and remove duplicates.

Song: C0 T0 C1 T2 C3, Sequences: 0, 1, ... // Narcotic

Sequences:
0: C3 T2 C4 T3 C5  // Intro
  Step 0: C0 T4 C6 T5 C7 T6 C8
  Step 1: T7 C9 T8 C8
  Step 2: C10 T8 C11 T9 C12
1: ...
  
Commands 
 0: AA l I				// All dark
 1: FA s 1				// Strobe 
 2: FA s 0				// Strobe off
 3: FO l -d 127 0 0 64	// Half blue
 4: DA s 1				// Drums strobe on
 5: DA s 0				// Drums strobe off
 6: F0 g d IRB a IB
 7: LA o d irb a ib t 3000 p 42?
 8: NextStep
 9: FO o				// Trigger 
10: FA g p 42? d irb a ib
11: FA o
12: NextSeq

Triggers
 0: CC MC1 83 127		// Pedal on
 1: CC MC1 83 0			// Pedal off
 2: CC MC1 84 127       // Pedal on
 3: CC MC1 84 0         // Pedal off
 4: On MC2 C4-C8		
 5: CC MC2 16 0..63
 6: On MC1 C4-C8
 7: On MC2
 8: On MC1
 9: MC1 NoNotes? 2s

Part 7: Memory Table
--------------------
Item                 Offset    Content  Description
Main                  00         100    Song Ref
                      02         200    Packed triggers Ref
                      04         400    Packed commands Ref
                      06         600    Unpacked triggers from song Ref
                      08         620    Unpacked triggers from sequence Ref
                      10         640    Unpacked triggers from step Ref
                      12         700    Unpacked commands from song Ref
                      14         720    Unpacked commands from sequence Ref
                      16         740    Unpacked commands from step Ref
					  18-	  			(virtual gap)
Song                 100                #Sequences
                     101                Sequence 0..14 Ref (2bytes)
                     ...
                     127                Sequence 14 Ref
                     128-				(virtual gap)
Sequence0            130                #Steps
                     131                Step 0..#Steps
Sequence 1           143                ...
...
Sequence 2           ...
...
Packed Commands      200                #Packed Commands
                     201                (reserved)
Command 0            222                Data of command 0
Command 1            ...  
Packed Triggers      400                As Packed Commands
Unpacked Commands   1000                As Packed Commands (from song, sequence, step)
Unpacked Triggers   1500                As Packed Commands (from song, sequence, step) 


When going to next step:
- Remove unpacked commands/triggers for that step
- Add commands/triggers for new step
- Run new step actions
When going to next sequence
- Remove unpacked commands/triggers for that sequence + step
- Add commands/triggers for new sequence + step
- Run new sequence actions
- Run new step actions

Memory & SD SPEED
=================

128 songs * 4 KB = 512 KB -> EEPROM not possible, SD is

How long it would take to send 512 KB?

524288 bytes * 10 bits/byte / 31,250 bits/sec = 167 s
Assuming 1 KB average: 131072 * 10 / 31250 = 42 s

one song: 4096 bytes * 10 bits/byte / 31,250 = 1.3 s
average : 1024 bytes: < 1 s

FLOW
====

  <----------------- PC ----------------->|<----- Arduino ------>
  Command ----------> MIDI -------> UART --> UART -------->  SD 
   Text   Converter   Sysex  MIDI   MIDI     MIDI  Command  Card
   File    (MDE)      File   Send                  Parser
              ^
              |
          Language 
         Definition








		 grammar mestra.DmxLightShow with org.eclipse.xtext.common.Terminals

generate dmxLightShow "http://www.DmxLightShow.mestra"


Mestra:
	'songs:' songs+=Song+ 'triggers:' triggers+=Trigger+ 'commands:' commands+=Command+;
   
Song:
	'song' name=ID tcs+=TriggersAndCommands* 'sequences' sequenceRefs+=[Sequence]+ 'sequences:' sequences+=Sequence+;

TriggersAndCommands:
	('trigger' triggerRef=[Trigger]) | ('command' commandRef=[Command]);
	
Sequence:
	'sequence' name=ID ';';
	
Trigger:
	'trigger' name=ID ';';
  
Command:
	'command' name=ID ';';
	