// Instructions
// - In this window, click RMF, Run As -> Generate Xtext Artifcats
// - Run project as Java project
// - In runtime application, create or select file xxx.mestradmx
// - Save file to let grammar be verified.

// Context graph:
// Select .xtext file (not this file)
// Select Window/Show View/Other .../Xtext/Xtext Syntax Graph

// Running tests:
// Select test file (mestra.dmxlightshow.tests/src/mestra.tests/DmxLightShowParingTest.xtend
// Select Run As: JUnit Test

// Creating model:
// RMB model/generated/DmxLighttShow.ecore
// http://www.cs.kun.nl/J.Hooman/DSL/Xtext_DSL_GettingStarted_Neon.pdf page 7
// Cannot find Initialize

// Show instance as ecore tree:
// Right click instance, select open with/other, chose from internal editors: Sample Ecore Model Editor. 
// Use Show Properties on items to see details.

// Creating output (via src/mestra.generator/DmxLightShowGenerator.xtend:
// In Runtime, select instance file, menu Projects/Clean All
// Mestra.bin is generated



// Grammar 

grammar mestra.DmxLightShow with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate dmxLightShow "http://www.example.org/domainmodel/Domainmodel"

// Main structure

Mestra:
	/*songs   +=Song+ 
	rules   +=Rule+
	triggers+=RuleTrigger+ 
	commands+=Command+;
	* 
	*/
	
	(songs+=Song | sequences+=Sequence | steps+=Step | rules+=Rule | triggers+=RuleTrigger | commands+=Command)*;

// Song structure
   
Song:
	'song' name=ID ':'
	  'bank' bank=MidiValue 'program' program=MidiValue 
      ('rules'     rules+=Rules)?
      ('sequences' sequences+=[Sequence] (',' sequences+=[Sequence])*)?;
        // sequences   += Sequence+)?;

Sequence:
	'sequence' name=ID ':'
      ('rules' rules+=Rules)?
      ('steps' steps+=[Step] (',' steps+=[Step])*)?; 
        //steps   += Step+)?;
	
Step:
	'step' name=ID  ':' 
	('rules' rules+=Rules)?;

// Rules

Rules: 
	{Rules} (rules+= [Rule] (',' rules+=[Rule])*)?;
	
Rule:
	'rule' name=ID ':' (ruleTriggers=RuleTriggers '->')? ruleCommands=RuleCommands ;
	
RuleTriggers:
	triggerRefs+=[RuleTrigger] (',' triggerRefs+=[RuleTrigger])*;

RuleCommands:
	commandsRefs+=[Command] (',' commandsRefs+=[Command])*;

// Rule Triggers

RuleTrigger:
//    name=ID type=( DmxRuleTrigger |  MidiRuleTrigger) ;
	  'trigger' name=ID ':' type=MidiRuleTrigger ;


// DmxRuleTrigger: // Not supported

MidiRuleTrigger:
	(('Time'       time       = Time) | 
	 ('Note'       note       = MidiNoteTrigger) | 
	 ('CC'         cc         = MidiCcTrigger) | 
	 ('Aftertouch' aftertouch = MidiAftertouchTrigger) | 
	 ('PrgChg'     prgchg     = MidiProgramChangeTrigger));
	
MidiNoteTrigger:
	onOff=ON_OFF 'Channel' mc=MidiChannel 'Note' note=MidiNoteOrRange ('Velocity' velocity=MidiValueOrRange)?;
	
MidiCcTrigger:
	'Channel' mc=MidiChannel 'Number' ccNumber=(MidiValue) 'Value' value=MidiValueOrRange;
	
MidiAftertouchTrigger:
	'Channel' mc=MidiChannel 'Value' value=MidiValueOrRange;
	
MidiProgramChangeTrigger:
	'Channel' mc=MidiChannel 'Bank' bank=MidiValue 'Program' program=MidiValue;
	
MidiChannel:  // Keep 'MC' as prefix, otherwise it is considered an INT
    mc= ('OMNI' | 
         'MC1' | 'MC2'  | 'MC3'  | 'MC4'  | 'MC5'  | 'MC6'  | 'MC7'  | 'MC8' | 
         'MC9' | 'MC10' | 'MC11' | 'MC12' | 'MC13' | 'MC14' | 'MC15' | 'MC16');
	
MidiValueOrRange:
	value=MidiValue | valueRange=MidiValueRange;
	
MidiValueRange:
	start=MidiValue '-' end=MidiValue;

MidiNoteOrRange:
	note=MIDI_NOTE | noteRange=MidiNoteRange;

MidiNoteRange: 
	start=MIDI_NOTE '-' end=MIDI_NOTE;

terminal MIDI_NOTE:
	('C' | 'D' | 'E' | 'F' | 'G' | 'A' | 'B') 
	('b' | '#')? 
	INT;
	 
MidiValue returns INT:
	value=INT;
	
Time:
	value=INT unit=('s' | 'ms');
	
// Commands

Command:
	'command' name=ID ':' type=DmxCommand ;

// MidiCommand: // Not supported

DmxCommand:
	parGroup=ParGroup dmxSubCommands=DmxSubCommands;

ParGroup:
	(parGroup=  'AllGroupsAll' | 
				{ParGroup} 'AllGroupsCenter' |
				{ParGroup} 'AllGroupsAllExceptEgoRisers' |
				{ParGroup} 'AllGroupsLeft' |
				{ParGroup} 'AllGroupsRight' |
				{ParGroup} 'LedBarAll' |
				{ParGroup} 'LedBarCenter' |
				{ParGroup} 'LedBarLeft' |
				{ParGroup} 'LedBarRight' |
				{ParGroup} 'DrumsAll' |
				{ParGroup} 'DrumsLeft' |
				{ParGroup} 'DrumsRight' |
				{ParGroup} 'EgoRisersAll' |
				{ParGroup} 'EgoRisersLeft' |
				{ParGroup} 'EgoRisersRight' |
				{ParGroup} 'FrontAll' |
				{ParGroup} 'FontCorners' |
				{ParGroup} 'FrontMiddle' |
				{ParGroup} 'FrontInner' |
				{ParGroup} 'FrontOuter' |
				{ParGroup} 'FrontLeft1Inside' |
				{ParGroup} 'FrontLeft2' |
				{ParGroup} 'FrontLeft3' |
				{ParGroup} 'FrontLeft4Outside' |
				{ParGroup} 'FrontLeftAll' |
				{ParGroup} 'FrontLeftInner' |
				{ParGroup} 'FrontLeftOuter' |
				{ParGroup} 'BannerAll' |
				{ParGroup} 'BannerLeft' |
				{ParGroup} 'BannerRight' |
				{ParGroup} 'FrontRight1Inside' |
				{ParGroup} 'FrontRight2' |
				{ParGroup} 'FrontRight3' |
				{ParGroup} 'FrontRight4Outside' |
				{ParGroup} 'FrontRightAll' |
				{ParGroup} 'FrontRightInner' |
				{ParGroup} 'FrontRightOuter');

DmxSubCommands:
	{DmxSubCommands} 
	(mode=DmxModeSubCommand)? 
	(preset=DmxPresetSubCommand)?  
	(delayTime=DmxDelayTimeSubCommand)? 
	(strobeTime=DmxStrobeTimeSubCommand)? 
	(stepNumber=DmxStepNumberSubCommand)? 
	(hold=DmxHoldSubCommand)? 
	(once=DmxOnceSubCommand)? 
	(defaultColor=DmxDefaultColorSubCommand)? 
	(alternateColor=DmxAlternateColorSubCommand)?;
	
DmxModeSubCommand:
	'Mode' DmxModeSubCommandData;
	
DmxModeSubCommandData:
	type=('trigger' | 'loop' | 'once' | 'restart');
	
DmxPresetSubCommand:
	'Preset' DmxPresetSubCommandData;
	
DmxPresetSubCommandData:
	presetName=                          'DEF2ALT' |
	           {DmxPresetSubCommandData} 'ALT2DEF' |
	           {DmxPresetSubCommandData} 'SWITCH_DEF_ALT' |
	           {DmxPresetSubCommandData} 'DEF2ACT' |
	           {DmxPresetSubCommandData} 'ACTUAL2DEF' |
	           {DmxPresetSubCommandData} 'SWITCH_DEF_ACTUAL' |
	           {DmxPresetSubCommandData} 'ALT2ACTUAL' |
	           {DmxPresetSubCommandData} 'ACTUAL2ALT' |
	           {DmxPresetSubCommandData} 'SWITCH_ALT_ACTUAL' |
	           {DmxPresetSubCommandData} 'SOLID' |           
	           {DmxPresetSubCommandData} 'DUAL_COLORS_DEF_ALT' |
	           {DmxPresetSubCommandData} 'DUAL_COLORS_ALT_DEF' |
	           {DmxPresetSubCommandData} 'CHASE_LEFT2RIGHT' |
	           {DmxPresetSubCommandData} 'CHASE_RIGHT2LEFT' |
	           {DmxPresetSubCommandData} 'SWITCH_LEFT_RIGHT_LEFT' |
	           {DmxPresetSubCommandData} 'SWITCH_RIGHT_LEFT_RIGHT' |
	           {DmxPresetSubCommandData} 'FADE_ALT2DEF' |
	           {DmxPresetSubCommandData} 'FADE_DEF2ALT' |
	           {DmxPresetSubCommandData} 'FADE_DEF_ALT_DEF' |
	           {DmxPresetSubCommandData} 'FADE_ALT_DEF_ALT' |
	           {DmxPresetSubCommandData} 'FADE_CHASE_LEFT2RIGHT' |
	           {DmxPresetSubCommandData} 'FADE_CHASE_RIGHT2LEFT' |
               {DmxPresetSubCommandData} 'FADE_CHASE_LEFT_RIGHT_LEFT' |
	           {DmxPresetSubCommandData} 'FADE_CHASE_RIGHT_LEFT_RIGHT' |
	           {DmxPresetSubCommandData} 'RAINBOW_NO_FADE_LEFT2RIGHT' |
	           {DmxPresetSubCommandData} 'RAINBOW_NO_FADE_RIGHT2LEFT' |
	           {DmxPresetSubCommandData} 'RAINBOW_FADE_LEFT2RIGHT' |
	           {DmxPresetSubCommandData} 'RAINBOW_FADE_RIGHT2LEFT';
	
DmxDelayTimeSubCommand:
	'DelayTime' time=Time;
	
DmxStrobeTimeSubCommand:
	'StrobeTime' time=Time;

DmxStepNumberSubCommand:
	'StepNumber' (last='LAST' | stepNumber=DmxValue);

DmxHoldSubCommand:
	'Hold' onOff=ON_OFF;
	
DmxOnceSubCommand:
	'Once' onOff=ON_OFF;
	
DmxDefaultColorSubCommand:
	'DefaultColor' color=DmxColor;
	
DmxAlternateColorSubCommand:
	'AlternateColor' color=DmxColor;

DmxColor: 
	 form=(ShortDmxColor | LongDmxColor);

ShortDmxColor:
	color=( 'OFF' |	'off' |	'w' | 'W' |	'b' | 'bw' | 'bW' | 'B' | 'Bw' | 'BW' |			
			'g' | 'gw' | 'gW' | 'gb' | 'gbw' | 'gbW' | 'gB' | 'gBw' | 'gBW' |			
			'G' | 'Gw' | 'GW' | 'Gb' | 'Gbw' | 'GbW' | 'GB' | 'GBw' | 'GBW' |			
			'r' | 'rw' | 'rW' | 'rb' | 'rbw' | 'rbW' | 'rB' | 'rBw' | 'rBW' |			
				  'rg' | 'rgw' | 'rgW' | 'rgb' | 'rgbw' | 'rgbW' | 'rgB' | 'rgBw' | 'rgBW' |			
			      'rG' | 'rGw' | 'rGW' | 'rGb' | 'rGbw' | 'rGbW' | 'rGB' | 'rGBw' | 'rGBW' |			
			'R' | 'Rw' | 'RW' |  'Rb' | 'Rbw' | 'RbW' | 'RB' | 'RBw' | 'RBW' |
			      'Rg' | 'Rgw' | 'RgW' | 'Rgb' | 'Rgbw' | 'RgbW' | 'RgB' | 'RgBw' | 'RgBW' |			
			      'RG' | 'RGw' | 'RGW' | 'RGb' | 'RGbw' | 'RGbW' | 'RGB' | 'RGBw' | 'RGBW' |			
			'i' | 'iw' | 'iW' | 'ib' | 'ibw' | 'ibW' | 'iB' | 'iBw' | 'iBW' |
			      'ig' | 'igw' | 'igW' | 'igb' | 'igbw' | 'igbW' | 'igB' | 'igBw' | 'igBW' |			
			      'iG' | 'iGw' | 'iGW' | 'iGb' | 'iGbw' | 'iGbW' | 'iGB' | 'iGBw' | 'iGBW' |			
			'ir' | 'irw' | 'irW' | 'irb' | 'irbw' | 'irbW' | 'irB' | 'irBw' | 'irBW' |			
			       'irg' | 'irgw' | 'irgW' | 'irgb' | 'irgbw' | 'irgbW' | 'irgB' | 'irgBw' | 'irgBW' |			
			       'irG' | 'irGw' | 'irGW' | 'irGb' | 'irGbw' | 'irGbW' | 'irGB' | 'irGBw' | 'irGBW' |			
			'iR' | 'iRw' | 'iRW' | 'iRb' | 'iRbw' | 'iRbW' | 'iRB' | 'iRBw' | 'iRBW' |			
			       'iRg' | 'iRgw' | 'iRgW' | 'iRgb' | 'iRgbw' | 'iRgbW' | 'iRgB' | 'iRgBw' | 'iRgBW' |			
			       'iRG' | 'iRGw' | 'iRGW' | 'iRGb' | 'iRGbw' | 'iRGbW' | 'iRGB' | 'iRGBw' | 'iRGBW' |	
		 	'I' | 'Iw' | 'IW' | 'Ib' | 'Ibw' | 'IbW' | 'IB' | 'IBw' | 'IBW' | 
		 	      'Ig' | 'Igw' | 'IgW' | 'Igb' | 'Igbw' | 'IgbW' | 'IgB' | 'IgBw' | 'IgBW' |			
			      'IG' | 'IGw' | 'IGW' | 'IGb' | 'IGbw' | 'IGbW' | 'IGB' | 'IGBw' | 'IGBW' |			
			'Ir' | 'Irw' | 'IrW' | 'Irb' | 'Irbw' | 'IrbW' | 'IrB' | 'IrBw' | 'IrBW' | 
			       'Irg' | 'Irgw' | 'IrgW' | 'Irgb' | 'Irgbw' | 'IrgbW' | 'IrgB' | 'IrgBw' | 'IrgBW' |			
			       'IrG' | 'IrGw' | 'IrGW' | 'IrGb' | 'IrGbw' | 'IrGbW' | 'IrGB' | 'IrGBw' | 'IrGBW' |			
			'IR' | 'IRw' | 'IRW' | 'IRb' | 'IRbw' | 'IRbW' | 'IRB' | 'IRBw' | 'IRBW' |
			       'IRg' | 'IRgw' | 'IRgW' | 'IRgb' | 'IRgbw' | 'IRgbW' | 'IRgB' | 'IRgBw' | 'IRgBW' |			
			       'IRG' | 'IRGw' | 'IRGW' | 'IRGb' | 'IRGbw' | 'IRGbW' | 'IRGB' | 'IRGBw' | 'IRGBW');

LongDmxColor:
	intensity=DmxValue red=DmxValue green=DmxValue blue=DmxValue (white=DmxValue)?;

DmxValue returns INT:
	value=INT;

ON_OFF: 
	onOff=('ON' | 'OFF');

